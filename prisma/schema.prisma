datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id           String     @id @default(uuid())
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  properties   Property[]
  favorites    Favorite[]
  reviews      Review[]
  bookings     Booking[]
}

model Property {
  id          String     @id @default(uuid())
  name        String
  tagline     String
  category    String
  image       String
  address     String
  city        String
  county      String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
  favorites   Favorite[]
  reviews     Review[]
  bookings    Booking[]
}

model Favorite {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  profile     Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String

  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
}

model Review {
  id          String   @id @default(uuid())
  profile     Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  rating      Int
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  booking     Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId   String   @unique // 確保每個訂單只有一條評論
}

model Booking {
  id             String   @id @default(uuid())
  profile        Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId      String
  property       Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId     String
  orderTotal     Int
  totalNights    Int
  checkIn        DateTime
  checkOut       DateTime
  paymentStatus  Boolean @default(false)
  isCancelled    Boolean @default(false)  //沒有取消才可以評論
  review         Review?  @relation
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
